{"id":"node_modules/danfojs-node/dist/core/groupby.js","dependencies":[{"name":"/Users/alex/SoftwareDevelopment/Web/tacs-interface/package.json","includedInParent":true,"mtime":1615769723745},{"name":"/Users/alex/SoftwareDevelopment/Web/tacs-interface/.babelrc","includedInParent":true,"mtime":1614894608398},{"name":"/Users/alex/SoftwareDevelopment/Web/tacs-interface/node_modules/danfojs-node/package.json","includedInParent":true,"mtime":499162500000},{"name":"./frame","loc":{"line":8,"column":21},"parent":"/Users/alex/SoftwareDevelopment/Web/tacs-interface/node_modules/danfojs-node/dist/core/groupby.js","resolved":"/Users/alex/SoftwareDevelopment/Web/tacs-interface/node_modules/danfojs-node/dist/core/frame.js"},{"name":"./utils","loc":{"line":10,"column":21},"parent":"/Users/alex/SoftwareDevelopment/Web/tacs-interface/node_modules/danfojs-node/dist/core/groupby.js","resolved":"/Users/alex/SoftwareDevelopment/Web/tacs-interface/node_modules/danfojs-node/dist/core/utils.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GroupBy = void 0;\n\nvar _frame = require(\"./frame\");\n\nvar _utils = require(\"./utils\");\n\nconst utils = new _utils.Utils();\n\nclass GroupBy {\n  constructor(col_dict, key_col, data, column_name) {\n    this.key_col = key_col;\n    this.col_dict = col_dict;\n    this.data = data;\n    this.column_name = column_name;\n    this.data_tensors = {};\n  }\n\n  group() {\n    if (this.key_col.length == 2) {\n      for (var i = 0; i < this.data.length; i++) {\n        let col1_index = this.column_name.indexOf(this.key_col[0]);\n        let col2_index = this.column_name.indexOf(this.key_col[1]);\n        let value = this.data[i];\n        let col1_value = value[col1_index];\n        let col2_value = value[col2_index];\n\n        if (Object.prototype.hasOwnProperty.call(this.col_dict, col1_value)) {\n          if (Object.prototype.hasOwnProperty.call(this.col_dict[col1_value], col2_value)) {\n            this.col_dict[col1_value][col2_value].push(value);\n          }\n        }\n      }\n\n      for (var key in this.col_dict) {\n        this.data_tensors[key] = {};\n\n        for (var key2 in this.col_dict[key]) {\n          let data = this.col_dict[key][key2];\n\n          if (data.length == 0) {\n            delete this.col_dict[key][key2];\n          } else {\n            this.data_tensors[key][key2] = new _frame.DataFrame(data, {\n              columns: this.column_name\n            });\n          }\n        }\n      }\n    } else {\n      for (let i = 0; i < this.data.length; i++) {\n        let col1_index = this.column_name.indexOf(this.key_col[0]);\n        let value = this.data[i];\n        let col1_value = value[col1_index];\n\n        if (Object.prototype.hasOwnProperty.call(this.col_dict, col1_value)) {\n          this.col_dict[col1_value].push(value);\n        }\n      }\n\n      for (let key in this.col_dict) {\n        let data = this.col_dict[key];\n        this.data_tensors[key] = new _frame.DataFrame(data, {\n          columns: this.column_name\n        });\n      }\n    }\n\n    return this;\n  }\n\n  col(col_names) {\n    if (Array.isArray(col_names)) {\n      for (let i = 0; i < col_names.length; i++) {\n        let col_name = col_names[i];\n\n        if (!this.column_name.includes(col_name)) {\n          throw new Error(`Column ${col_name} does not exist in groups`);\n        }\n      }\n    } else {\n      throw new Error(`Col_name must be an array of column`);\n    }\n\n    this.group_col_name = col_names;\n\n    if (this.key_col.length == 2) {\n      this.group_col = {};\n\n      for (var key1 in this.data_tensors) {\n        this.group_col[key1] = {};\n\n        for (var key2 in this.data_tensors[key1]) {\n          this.group_col[key1][key2] = [];\n\n          for (let i = 0; i < col_names.length; i++) {\n            let col_name = col_names[i];\n            let data = this.data_tensors[key1][key2].column(col_name);\n            this.group_col[key1][key2].push(data);\n          }\n        }\n      }\n    } else {\n      this.group_col = {};\n\n      for (let key1 in this.data_tensors) {\n        this.group_col[key1] = [];\n\n        for (let i = 0; i < col_names.length; i++) {\n          let col_name = col_names[i];\n          let data = this.data_tensors[key1].column(col_name);\n          this.group_col[key1].push(data);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  arithemetic(operation) {\n    let ops_name = [\"mean\", \"sum\", \"count\", \"mode\", \"std\", \"var\", \"cumsum\", \"cumprod\", \"cummax\", \"cummin\"];\n    let ops_map = {\n      \"mean\": \"mean()\",\n      \"sum\": \"sum()\",\n      \"mode\": \"mode()\",\n      \"count\": \"count()\",\n      \"std\": \"std()\",\n      \"var\": \"var()\",\n      \"cumsum\": \"cumsum().values\",\n      \"cumprod\": \"cumprod().values\",\n      \"cummax\": \"cummax().values\",\n      \"cummin\": \"cummin().values\"\n    };\n    let is_array = false;\n\n    if (Array.isArray(operation)) {\n      is_array = true;\n    }\n\n    if (this.key_col.length == 2) {\n      let count_group = {};\n\n      for (var key1 in this.group_col) {\n        count_group[key1] = {};\n\n        for (var key2 in this.group_col[key1]) {\n          count_group[key1][key2] = [];\n\n          for (let i = 0; i < this.group_col[key1][key2].length; i++) {\n            let data = null;\n\n            if (is_array) {\n              let op = operation[i];\n\n              if (!ops_name.includes(op)) {\n                throw new Error(\"operation does not exist\");\n              }\n\n              data = eval(`this.group_col[key1][key2][i].${ops_map[op]}`);\n            } else {\n              data = eval(`this.group_col[key1][key2][i].${operation}`);\n            }\n\n            count_group[key1][key2].push(data);\n          }\n        }\n      }\n\n      return count_group;\n    } else {\n      let count_group = {};\n\n      for (let key1 in this.group_col) {\n        count_group[key1] = [];\n\n        for (let i = 0; i < this.group_col[key1].length; i++) {\n          let data = null;\n\n          if (is_array) {\n            let op = operation[i];\n\n            if (!ops_name.includes(op)) {\n              throw new Error(\"operation does not exist\");\n            }\n\n            data = eval(`this.group_col[key1][i].${ops_map[op]}`);\n          } else {\n            data = eval(`this.group_col[key1][i].${operation}`);\n          }\n\n          count_group[key1].push(data);\n        }\n      }\n\n      return count_group;\n    }\n  }\n\n  count() {\n    let value = this.arithemetic(\"count()\");\n    let df = this.to_DataFrame(this.key_col, this.group_col_name, value, \"count\");\n    return df;\n  }\n\n  sum() {\n    let value = this.arithemetic(\"sum()\");\n    let df = this.to_DataFrame(this.key_col, this.group_col_name, value, \"sum\");\n    return df;\n  }\n\n  std() {\n    let value = this.arithemetic(\"std()\");\n    let df = this.to_DataFrame(this.key_col, this.group_col_name, value, \"std\");\n    return df;\n  }\n\n  var() {\n    let value = this.arithemetic(\"var()\");\n    let df = this.to_DataFrame(this.key_col, this.group_col_name, value, \"var\");\n    return df;\n  }\n\n  mean() {\n    let value = this.arithemetic(\"mean()\");\n    let df = this.to_DataFrame(this.key_col, this.group_col_name, value, \"mean\");\n    return df;\n  }\n\n  cumsum() {\n    let value = this.arithemetic(\"cumsum().values\");\n    let df = this.to_DataFrame(this.key_col, this.group_col_name, value, \"cumsum\");\n    return df;\n  }\n\n  cummax() {\n    let value = this.arithemetic(\"cummax().values\");\n    let df = this.to_DataFrame(this.key_col, this.group_col_name, value, \"cummax\");\n    return df;\n  }\n\n  cumprod() {\n    let value = this.arithemetic(\"cumprod().values\");\n    let df = this.to_DataFrame(this.key_col, this.group_col_name, value, \"cumprod\");\n    return df;\n  }\n\n  cummin() {\n    let value = this.arithemetic(\"cummin().values\");\n    let df = this.to_DataFrame(this.key_col, this.group_col_name, value, \"cummin\");\n    return df;\n  }\n\n  max() {\n    let value = this.arithemetic(\"max()\");\n    let df = this.to_DataFrame(this.key_col, this.group_col_name, value, \"max\");\n    return df;\n  }\n\n  min() {\n    let value = this.arithemetic(\"min()\");\n    let df = this.to_DataFrame(this.key_col, this.group_col_name, value, \"min\");\n    return df;\n  }\n\n  get_groups(key) {\n    if (this.key_col.length == 2) {\n      if (key.length == 2) {\n        let key1 = key[0];\n        let key2 = key[1];\n\n        utils.__is_object(this.data_tensors, key1, `Key Error: ${key1} not in object`);\n\n        return this.data_tensors[key1][key2];\n      } else {\n        throw new Error(\"specify the two group by column\");\n      }\n    } else if (this.key_col.length == 1) {\n      if (key.length == 1) {\n        utils.__is_object(this.data_tensors, key[0], `Key Error: ${key[0]} not in object`);\n\n        return this.data_tensors[key[0]];\n      } else {\n        throw new Error(\"specify the one group by column\");\n      }\n    }\n\n    return this.data_tensors[key];\n  }\n\n  agg(kwargs = {}) {\n    let columns = Object.keys(kwargs);\n    let operations = columns.map(x => {\n      return kwargs[x].toLocaleLowerCase();\n    });\n    this.col(columns);\n    let data = this.arithemetic(operations);\n    let df = this.to_DataFrame(this.key_col, this.group_col_name, data, operations);\n    return df;\n  }\n\n  to_DataFrame(key_col, col, data, ops) {\n    if (key_col.length == 2) {\n      let df_data = [];\n\n      for (let key_1 in data) {\n        let key_val = data[key_1];\n\n        for (let key_2 in key_val) {\n          let k_data = key_val[key_2];\n          let key_data = [];\n\n          if (Array.isArray(k_data[0])) {\n            for (let i = 0; i < k_data.length; i++) {\n              let col_data = k_data[i];\n\n              for (let j = 0; j < col_data.length; j++) {\n                if (typeof key_data[j] === \"undefined\") {\n                  key_data[j] = [];\n                  key_data[j][0] = isNaN(parseInt(key_1)) ? key_1 : parseInt(key_1);\n                  key_data[j][1] = isNaN(parseInt(key_2)) ? key_2 : parseInt(key_2);\n                  key_data[j].push(col_data[j]);\n                } else {\n                  key_data[j].push(col_data[j]);\n                }\n              }\n            }\n\n            df_data.push(...key_data);\n          } else {\n            key_data[0] = isNaN(parseInt(key_1)) ? key_1 : parseInt(key_1);\n            key_data[1] = isNaN(parseInt(key_2)) ? key_2 : parseInt(key_2);\n            key_data.push(...k_data);\n            df_data.push(key_data);\n          }\n        }\n      }\n\n      let column = [...key_col];\n      let group_col = col.slice().map((x, i) => {\n        if (Array.isArray(ops)) {\n          return `${x}_${ops[i]}`;\n        }\n\n        return `${x}_${ops}`;\n      });\n      column.push(...group_col);\n      return new _frame.DataFrame(df_data, {\n        columns: column\n      });\n    } else {\n      let df_data = [];\n\n      for (let key_1 in data) {\n        let key_val = data[key_1];\n        let key_data = [];\n\n        if (Array.isArray(key_val[0])) {\n          for (let i = 0; i < key_val.length; i++) {\n            let col_data = key_val[i];\n\n            for (let j = 0; j < col_data.length; j++) {\n              if (typeof key_data[j] === \"undefined\") {\n                key_data[j] = [];\n                key_data[j][0] = isNaN(parseInt(key_1)) ? key_1 : parseInt(key_1);\n                key_data[j].push(col_data[j]);\n              } else {\n                key_data[j].push(col_data[j]);\n              }\n            }\n\n            df_data.push(...key_data);\n          }\n        } else {\n          key_data[0] = isNaN(parseInt(key_1)) ? key_1 : parseInt(key_1);\n          key_data.push(...key_val);\n          df_data.push(key_data);\n        }\n      }\n\n      let column = [...key_col];\n      let group_col = col.slice().map((x, i) => {\n        if (Array.isArray(ops)) {\n          return `${x}_${ops[i]}`;\n        }\n\n        return `${x}_${ops}`;\n      });\n      column.push(...group_col);\n      return new _frame.DataFrame(df_data, {\n        columns: column\n      });\n    }\n  }\n\n}\n\nexports.GroupBy = GroupBy;"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/danfojs-node/dist/core/groupby.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}}],"sources":{"node_modules/danfojs-node/dist/core/groupby.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GroupBy = void 0;\n\nvar _frame = require(\"./frame\");\n\nvar _utils = require(\"./utils\");\n\nconst utils = new _utils.Utils();\n\nclass GroupBy {\n  constructor(col_dict, key_col, data, column_name) {\n    this.key_col = key_col;\n    this.col_dict = col_dict;\n    this.data = data;\n    this.column_name = column_name;\n    this.data_tensors = {};\n  }\n\n  group() {\n    if (this.key_col.length == 2) {\n      for (var i = 0; i < this.data.length; i++) {\n        let col1_index = this.column_name.indexOf(this.key_col[0]);\n        let col2_index = this.column_name.indexOf(this.key_col[1]);\n        let value = this.data[i];\n        let col1_value = value[col1_index];\n        let col2_value = value[col2_index];\n\n        if (Object.prototype.hasOwnProperty.call(this.col_dict, col1_value)) {\n          if (Object.prototype.hasOwnProperty.call(this.col_dict[col1_value], col2_value)) {\n            this.col_dict[col1_value][col2_value].push(value);\n          }\n        }\n      }\n\n      for (var key in this.col_dict) {\n        this.data_tensors[key] = {};\n\n        for (var key2 in this.col_dict[key]) {\n          let data = this.col_dict[key][key2];\n\n          if (data.length == 0) {\n            delete this.col_dict[key][key2];\n          } else {\n            this.data_tensors[key][key2] = new _frame.DataFrame(data, {\n              columns: this.column_name\n            });\n          }\n        }\n      }\n    } else {\n      for (let i = 0; i < this.data.length; i++) {\n        let col1_index = this.column_name.indexOf(this.key_col[0]);\n        let value = this.data[i];\n        let col1_value = value[col1_index];\n\n        if (Object.prototype.hasOwnProperty.call(this.col_dict, col1_value)) {\n          this.col_dict[col1_value].push(value);\n        }\n      }\n\n      for (let key in this.col_dict) {\n        let data = this.col_dict[key];\n        this.data_tensors[key] = new _frame.DataFrame(data, {\n          columns: this.column_name\n        });\n      }\n    }\n\n    return this;\n  }\n\n  col(col_names) {\n    if (Array.isArray(col_names)) {\n      for (let i = 0; i < col_names.length; i++) {\n        let col_name = col_names[i];\n\n        if (!this.column_name.includes(col_name)) {\n          throw new Error(`Column ${col_name} does not exist in groups`);\n        }\n      }\n    } else {\n      throw new Error(`Col_name must be an array of column`);\n    }\n\n    this.group_col_name = col_names;\n\n    if (this.key_col.length == 2) {\n      this.group_col = {};\n\n      for (var key1 in this.data_tensors) {\n        this.group_col[key1] = {};\n\n        for (var key2 in this.data_tensors[key1]) {\n          this.group_col[key1][key2] = [];\n\n          for (let i = 0; i < col_names.length; i++) {\n            let col_name = col_names[i];\n            let data = this.data_tensors[key1][key2].column(col_name);\n            this.group_col[key1][key2].push(data);\n          }\n        }\n      }\n    } else {\n      this.group_col = {};\n\n      for (let key1 in this.data_tensors) {\n        this.group_col[key1] = [];\n\n        for (let i = 0; i < col_names.length; i++) {\n          let col_name = col_names[i];\n          let data = this.data_tensors[key1].column(col_name);\n          this.group_col[key1].push(data);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  arithemetic(operation) {\n    let ops_name = [\"mean\", \"sum\", \"count\", \"mode\", \"std\", \"var\", \"cumsum\", \"cumprod\", \"cummax\", \"cummin\"];\n    let ops_map = {\n      \"mean\": \"mean()\",\n      \"sum\": \"sum()\",\n      \"mode\": \"mode()\",\n      \"count\": \"count()\",\n      \"std\": \"std()\",\n      \"var\": \"var()\",\n      \"cumsum\": \"cumsum().values\",\n      \"cumprod\": \"cumprod().values\",\n      \"cummax\": \"cummax().values\",\n      \"cummin\": \"cummin().values\"\n    };\n    let is_array = false;\n\n    if (Array.isArray(operation)) {\n      is_array = true;\n    }\n\n    if (this.key_col.length == 2) {\n      let count_group = {};\n\n      for (var key1 in this.group_col) {\n        count_group[key1] = {};\n\n        for (var key2 in this.group_col[key1]) {\n          count_group[key1][key2] = [];\n\n          for (let i = 0; i < this.group_col[key1][key2].length; i++) {\n            let data = null;\n\n            if (is_array) {\n              let op = operation[i];\n\n              if (!ops_name.includes(op)) {\n                throw new Error(\"operation does not exist\");\n              }\n\n              data = eval(`this.group_col[key1][key2][i].${ops_map[op]}`);\n            } else {\n              data = eval(`this.group_col[key1][key2][i].${operation}`);\n            }\n\n            count_group[key1][key2].push(data);\n          }\n        }\n      }\n\n      return count_group;\n    } else {\n      let count_group = {};\n\n      for (let key1 in this.group_col) {\n        count_group[key1] = [];\n\n        for (let i = 0; i < this.group_col[key1].length; i++) {\n          let data = null;\n\n          if (is_array) {\n            let op = operation[i];\n\n            if (!ops_name.includes(op)) {\n              throw new Error(\"operation does not exist\");\n            }\n\n            data = eval(`this.group_col[key1][i].${ops_map[op]}`);\n          } else {\n            data = eval(`this.group_col[key1][i].${operation}`);\n          }\n\n          count_group[key1].push(data);\n        }\n      }\n\n      return count_group;\n    }\n  }\n\n  count() {\n    let value = this.arithemetic(\"count()\");\n    let df = this.to_DataFrame(this.key_col, this.group_col_name, value, \"count\");\n    return df;\n  }\n\n  sum() {\n    let value = this.arithemetic(\"sum()\");\n    let df = this.to_DataFrame(this.key_col, this.group_col_name, value, \"sum\");\n    return df;\n  }\n\n  std() {\n    let value = this.arithemetic(\"std()\");\n    let df = this.to_DataFrame(this.key_col, this.group_col_name, value, \"std\");\n    return df;\n  }\n\n  var() {\n    let value = this.arithemetic(\"var()\");\n    let df = this.to_DataFrame(this.key_col, this.group_col_name, value, \"var\");\n    return df;\n  }\n\n  mean() {\n    let value = this.arithemetic(\"mean()\");\n    let df = this.to_DataFrame(this.key_col, this.group_col_name, value, \"mean\");\n    return df;\n  }\n\n  cumsum() {\n    let value = this.arithemetic(\"cumsum().values\");\n    let df = this.to_DataFrame(this.key_col, this.group_col_name, value, \"cumsum\");\n    return df;\n  }\n\n  cummax() {\n    let value = this.arithemetic(\"cummax().values\");\n    let df = this.to_DataFrame(this.key_col, this.group_col_name, value, \"cummax\");\n    return df;\n  }\n\n  cumprod() {\n    let value = this.arithemetic(\"cumprod().values\");\n    let df = this.to_DataFrame(this.key_col, this.group_col_name, value, \"cumprod\");\n    return df;\n  }\n\n  cummin() {\n    let value = this.arithemetic(\"cummin().values\");\n    let df = this.to_DataFrame(this.key_col, this.group_col_name, value, \"cummin\");\n    return df;\n  }\n\n  max() {\n    let value = this.arithemetic(\"max()\");\n    let df = this.to_DataFrame(this.key_col, this.group_col_name, value, \"max\");\n    return df;\n  }\n\n  min() {\n    let value = this.arithemetic(\"min()\");\n    let df = this.to_DataFrame(this.key_col, this.group_col_name, value, \"min\");\n    return df;\n  }\n\n  get_groups(key) {\n    if (this.key_col.length == 2) {\n      if (key.length == 2) {\n        let key1 = key[0];\n        let key2 = key[1];\n\n        utils.__is_object(this.data_tensors, key1, `Key Error: ${key1} not in object`);\n\n        return this.data_tensors[key1][key2];\n      } else {\n        throw new Error(\"specify the two group by column\");\n      }\n    } else if (this.key_col.length == 1) {\n      if (key.length == 1) {\n        utils.__is_object(this.data_tensors, key[0], `Key Error: ${key[0]} not in object`);\n\n        return this.data_tensors[key[0]];\n      } else {\n        throw new Error(\"specify the one group by column\");\n      }\n    }\n\n    return this.data_tensors[key];\n  }\n\n  agg(kwargs = {}) {\n    let columns = Object.keys(kwargs);\n    let operations = columns.map(x => {\n      return kwargs[x].toLocaleLowerCase();\n    });\n    this.col(columns);\n    let data = this.arithemetic(operations);\n    let df = this.to_DataFrame(this.key_col, this.group_col_name, data, operations);\n    return df;\n  }\n\n  to_DataFrame(key_col, col, data, ops) {\n    if (key_col.length == 2) {\n      let df_data = [];\n\n      for (let key_1 in data) {\n        let key_val = data[key_1];\n\n        for (let key_2 in key_val) {\n          let k_data = key_val[key_2];\n          let key_data = [];\n\n          if (Array.isArray(k_data[0])) {\n            for (let i = 0; i < k_data.length; i++) {\n              let col_data = k_data[i];\n\n              for (let j = 0; j < col_data.length; j++) {\n                if (typeof key_data[j] === \"undefined\") {\n                  key_data[j] = [];\n                  key_data[j][0] = isNaN(parseInt(key_1)) ? key_1 : parseInt(key_1);\n                  key_data[j][1] = isNaN(parseInt(key_2)) ? key_2 : parseInt(key_2);\n                  key_data[j].push(col_data[j]);\n                } else {\n                  key_data[j].push(col_data[j]);\n                }\n              }\n            }\n\n            df_data.push(...key_data);\n          } else {\n            key_data[0] = isNaN(parseInt(key_1)) ? key_1 : parseInt(key_1);\n            key_data[1] = isNaN(parseInt(key_2)) ? key_2 : parseInt(key_2);\n            key_data.push(...k_data);\n            df_data.push(key_data);\n          }\n        }\n      }\n\n      let column = [...key_col];\n      let group_col = col.slice().map((x, i) => {\n        if (Array.isArray(ops)) {\n          return `${x}_${ops[i]}`;\n        }\n\n        return `${x}_${ops}`;\n      });\n      column.push(...group_col);\n      return new _frame.DataFrame(df_data, {\n        columns: column\n      });\n    } else {\n      let df_data = [];\n\n      for (let key_1 in data) {\n        let key_val = data[key_1];\n        let key_data = [];\n\n        if (Array.isArray(key_val[0])) {\n          for (let i = 0; i < key_val.length; i++) {\n            let col_data = key_val[i];\n\n            for (let j = 0; j < col_data.length; j++) {\n              if (typeof key_data[j] === \"undefined\") {\n                key_data[j] = [];\n                key_data[j][0] = isNaN(parseInt(key_1)) ? key_1 : parseInt(key_1);\n                key_data[j].push(col_data[j]);\n              } else {\n                key_data[j].push(col_data[j]);\n              }\n            }\n\n            df_data.push(...key_data);\n          }\n        } else {\n          key_data[0] = isNaN(parseInt(key_1)) ? key_1 : parseInt(key_1);\n          key_data.push(...key_val);\n          df_data.push(key_data);\n        }\n      }\n\n      let column = [...key_col];\n      let group_col = col.slice().map((x, i) => {\n        if (Array.isArray(ops)) {\n          return `${x}_${ops[i]}`;\n        }\n\n        return `${x}_${ops}`;\n      });\n      column.push(...group_col);\n      return new _frame.DataFrame(df_data, {\n        columns: column\n      });\n    }\n  }\n\n}\n\nexports.GroupBy = GroupBy;"},"lineCount":401}},"error":null,"hash":"3f8855605c115b58602e55173a69963c","cacheData":{"env":{}}}