{"id":"node_modules/danfojs-node/dist/core/merge.js","dependencies":[{"name":"/Users/alex/SoftwareDevelopment/Web/tacs-interface/package.json","includedInParent":true,"mtime":1615769723745},{"name":"/Users/alex/SoftwareDevelopment/Web/tacs-interface/.babelrc","includedInParent":true,"mtime":1614894608398},{"name":"/Users/alex/SoftwareDevelopment/Web/tacs-interface/node_modules/danfojs-node/package.json","includedInParent":true,"mtime":499162500000},{"name":"./frame","loc":{"line":8,"column":21},"parent":"/Users/alex/SoftwareDevelopment/Web/tacs-interface/node_modules/danfojs-node/dist/core/merge.js","resolved":"/Users/alex/SoftwareDevelopment/Web/tacs-interface/node_modules/danfojs-node/dist/core/frame.js"},{"name":"./utils","loc":{"line":10,"column":21},"parent":"/Users/alex/SoftwareDevelopment/Web/tacs-interface/node_modules/danfojs-node/dist/core/merge.js","resolved":"/Users/alex/SoftwareDevelopment/Web/tacs-interface/node_modules/danfojs-node/dist/core/utils.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.merge = exports.Merge = void 0;\n\nvar _frame = require(\"./frame\");\n\nvar _utils = require(\"./utils\");\n\nconst utils = new _utils.Utils();\n\nclass Merge {\n  constructor(kwargs) {\n    utils.__in_object(kwargs, \"left\");\n\n    utils.__in_object(kwargs, \"right\");\n\n    utils.__in_object(kwargs, \"on\");\n\n    if (!utils.__key_in_object(kwargs, \"how\")) {\n      this.how = 'inner';\n      kwargs['how'] = 'inner';\n    } else {\n      this.how = kwargs['how'];\n    }\n\n    this.left = null;\n    this.right = null;\n    this.on = null;\n    let how_keys = [\"outer\", \"inner\", \"left\", \"right\"];\n\n    if (kwargs[\"left\"] instanceof _frame.DataFrame && kwargs[\"right\"] instanceof _frame.DataFrame) {\n      this.left = kwargs[\"left\"];\n      this.right = kwargs[\"right\"];\n    } else {\n      throw new Error(\"The left and right key value must be a dataFrame\");\n    }\n\n    if (Array.isArray(kwargs[\"on\"])) {\n      this.on = kwargs[\"on\"];\n    } else {\n      throw new Error(\"key 'on' must be a list\");\n    }\n\n    if (how_keys.includes(kwargs[\"how\"])) {\n      this.how = kwargs[\"how\"];\n    } else {\n      throw new Error(`${kwargs[\"how\"]} specify in keyword how is not recognise`);\n    }\n\n    this.left_col_index = [];\n    this.right_col_index = [];\n\n    for (let i = 0; i < this.on.length; i++) {\n      if (this.left.columns.includes(this.on[i]) && this.right.columns.includes(this.on[i])) {\n        let left_index = this.left.columns.indexOf(this.on[i]);\n        let right_index = this.right.columns.indexOf(this.on[i]);\n        this.left_col_index.push(left_index);\n        this.right_col_index.push(right_index);\n      }\n    }\n\n    this.left_key_dict = {};\n    this.right_key_dict = {};\n    let left_values = this.left.values;\n    let right_values = this.right.values;\n\n    for (let i = 0; i < left_values.length; i++) {\n      let left_value = left_values[i];\n      let right_value = right_values[i];\n      let right_key_comb = \"\";\n      let left_key_comb = \"\";\n\n      for (let j = 0; j < this.left_col_index.length; j++) {\n        let index = this.left_col_index[j];\n        left_key_comb += `_${left_value[index]}`;\n      }\n\n      let self = this;\n      let left_value_filter = left_value.filter(function (val, index) {\n        return !self.left_col_index.includes(index);\n      });\n\n      if (utils.__key_in_object(this.left_key_dict, left_key_comb)) {\n        this.left_key_dict[left_key_comb].push(left_value_filter);\n      } else {\n        this.left_key_dict[left_key_comb] = [left_value_filter];\n      }\n    }\n\n    for (let i = 0; i < right_values.length; i++) {\n      let right_value = right_values[i];\n      let right_key_comb = \"\";\n\n      for (let j = 0; j < this.right_col_index.length; j++) {\n        let index = this.right_col_index[j];\n        right_key_comb += `_${right_value[index]}`;\n      }\n\n      let self = this;\n      let right_value_filter = right_value.filter(function (val, index) {\n        return !self.right_col_index.includes(index);\n      });\n\n      if (utils.__key_in_object(this.right_key_dict, right_key_comb)) {\n        this.right_key_dict[right_key_comb].push(right_value_filter);\n      } else {\n        this.right_key_dict[right_key_comb] = [right_value_filter];\n      }\n    }\n\n    this.__create_columns();\n\n    let data = null;\n\n    switch (this.how) {\n      case \"outer\":\n        data = this.outer();\n        break;\n\n      case \"inner\":\n        data = this.inner();\n        break;\n\n      case \"left\":\n        data = this.left_merge();\n        break;\n\n      case \"right\":\n        data = this.right_merge();\n        break;\n    }\n\n    let df = new _frame.DataFrame(data = data, {\n      columns: this.columns\n    });\n    return df;\n  }\n\n  __create_columns() {\n    let self = this;\n    self.left_col = self.left.columns.filter((val, index) => {\n      return !self.left_col_index.includes(index);\n    });\n    self.right_col = self.right.columns.filter((val, index) => {\n      return !self.right_col_index.includes(index);\n    });\n    self.columns = [...self.on];\n    let column_duplicate = {};\n    let temp_column = [...self.left_col];\n    temp_column.push(...self.right_col);\n\n    for (let i = 0; i < temp_column.length; i++) {\n      let col = temp_column[i];\n\n      if (utils.__key_in_object(column_duplicate, col)) {\n        let col_name = `${col}_${column_duplicate[col]}`;\n        self.columns.push(col_name);\n        column_duplicate[col] += 1;\n      } else {\n        self.columns.push(col);\n        column_duplicate[col] = 1;\n      }\n    }\n  }\n\n  outer() {\n    let keys = Object.keys(this.left_key_dict);\n    keys.push(...Object.keys(this.right_key_dict));\n    keys = Array.from(new Set(keys));\n    let data = this.basic(keys);\n    return data;\n  }\n\n  inner() {\n    let left_keys = Object.keys(this.left_key_dict);\n    let right_keys = Object.keys(this.right_key_dict);\n    let keys = left_keys.filter(val => {\n      return right_keys.includes(val);\n    });\n    let data = this.basic(keys);\n    return data;\n  }\n\n  left_merge() {\n    let keys = Object.keys(this.left_key_dict);\n    let data = this.basic(keys);\n    return data;\n  }\n\n  right_merge() {\n    let keys = Object.keys(this.right_key_dict);\n    let data = this.basic(keys);\n    return data;\n  }\n\n  basic(keys) {\n    let data = [];\n\n    for (let i = 0; i < keys.length; i++) {\n      let key = keys[i];\n      let key_array = key.split(\"_\").filter(val => {\n        return val != \"\";\n      });\n\n      if (utils.__key_in_object(this.left_key_dict, key)) {\n        let left_row = this.left_key_dict[key];\n\n        for (let left_i = 0; left_i < left_row.length; left_i++) {\n          let left_row_row = left_row[left_i];\n\n          if (utils.__key_in_object(this.right_key_dict, key)) {\n            let right_row = this.right_key_dict[key];\n\n            for (let r_i = 0; r_i < right_row.length; r_i++) {\n              let right_row_row = right_row[r_i];\n              let inner_data = key_array.slice(0);\n              inner_data.push(...left_row_row);\n              inner_data.push(...right_row_row);\n              data.push(inner_data);\n            }\n          } else {\n            let nan_array = Array(this.right_col.length);\n\n            for (let i = 0; i < this.right_col.length; i++) {\n              nan_array[i] = NaN;\n            }\n\n            let inner_data = key_array.slice(0);\n            inner_data.push(...left_row_row);\n            inner_data.push(...nan_array);\n            data.push(inner_data);\n          }\n        }\n      } else {\n        let right_row = this.right_key_dict[key];\n\n        for (let i = 0; i < right_row.length; i++) {\n          let right_row_row = right_row[i];\n          let nan_array = Array(this.left_col.length);\n\n          for (let j = 0; j < nan_array.length; j++) {\n            nan_array[j] = NaN;\n          }\n\n          let inner_data = key_array.slice(0);\n          inner_data.push(...nan_array);\n          inner_data.push(...right_row_row);\n          data.push(inner_data);\n        }\n      }\n    }\n\n    return data;\n  }\n\n}\n\nexports.Merge = Merge;\n\nconst merge = kwargs => {\n  let merge = new Merge(kwargs);\n  return merge;\n};\n\nexports.merge = merge;"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/danfojs-node/dist/core/merge.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}}],"sources":{"node_modules/danfojs-node/dist/core/merge.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.merge = exports.Merge = void 0;\n\nvar _frame = require(\"./frame\");\n\nvar _utils = require(\"./utils\");\n\nconst utils = new _utils.Utils();\n\nclass Merge {\n  constructor(kwargs) {\n    utils.__in_object(kwargs, \"left\");\n\n    utils.__in_object(kwargs, \"right\");\n\n    utils.__in_object(kwargs, \"on\");\n\n    if (!utils.__key_in_object(kwargs, \"how\")) {\n      this.how = 'inner';\n      kwargs['how'] = 'inner';\n    } else {\n      this.how = kwargs['how'];\n    }\n\n    this.left = null;\n    this.right = null;\n    this.on = null;\n    let how_keys = [\"outer\", \"inner\", \"left\", \"right\"];\n\n    if (kwargs[\"left\"] instanceof _frame.DataFrame && kwargs[\"right\"] instanceof _frame.DataFrame) {\n      this.left = kwargs[\"left\"];\n      this.right = kwargs[\"right\"];\n    } else {\n      throw new Error(\"The left and right key value must be a dataFrame\");\n    }\n\n    if (Array.isArray(kwargs[\"on\"])) {\n      this.on = kwargs[\"on\"];\n    } else {\n      throw new Error(\"key 'on' must be a list\");\n    }\n\n    if (how_keys.includes(kwargs[\"how\"])) {\n      this.how = kwargs[\"how\"];\n    } else {\n      throw new Error(`${kwargs[\"how\"]} specify in keyword how is not recognise`);\n    }\n\n    this.left_col_index = [];\n    this.right_col_index = [];\n\n    for (let i = 0; i < this.on.length; i++) {\n      if (this.left.columns.includes(this.on[i]) && this.right.columns.includes(this.on[i])) {\n        let left_index = this.left.columns.indexOf(this.on[i]);\n        let right_index = this.right.columns.indexOf(this.on[i]);\n        this.left_col_index.push(left_index);\n        this.right_col_index.push(right_index);\n      }\n    }\n\n    this.left_key_dict = {};\n    this.right_key_dict = {};\n    let left_values = this.left.values;\n    let right_values = this.right.values;\n\n    for (let i = 0; i < left_values.length; i++) {\n      let left_value = left_values[i];\n      let right_value = right_values[i];\n      let right_key_comb = \"\";\n      let left_key_comb = \"\";\n\n      for (let j = 0; j < this.left_col_index.length; j++) {\n        let index = this.left_col_index[j];\n        left_key_comb += `_${left_value[index]}`;\n      }\n\n      let self = this;\n      let left_value_filter = left_value.filter(function (val, index) {\n        return !self.left_col_index.includes(index);\n      });\n\n      if (utils.__key_in_object(this.left_key_dict, left_key_comb)) {\n        this.left_key_dict[left_key_comb].push(left_value_filter);\n      } else {\n        this.left_key_dict[left_key_comb] = [left_value_filter];\n      }\n    }\n\n    for (let i = 0; i < right_values.length; i++) {\n      let right_value = right_values[i];\n      let right_key_comb = \"\";\n\n      for (let j = 0; j < this.right_col_index.length; j++) {\n        let index = this.right_col_index[j];\n        right_key_comb += `_${right_value[index]}`;\n      }\n\n      let self = this;\n      let right_value_filter = right_value.filter(function (val, index) {\n        return !self.right_col_index.includes(index);\n      });\n\n      if (utils.__key_in_object(this.right_key_dict, right_key_comb)) {\n        this.right_key_dict[right_key_comb].push(right_value_filter);\n      } else {\n        this.right_key_dict[right_key_comb] = [right_value_filter];\n      }\n    }\n\n    this.__create_columns();\n\n    let data = null;\n\n    switch (this.how) {\n      case \"outer\":\n        data = this.outer();\n        break;\n\n      case \"inner\":\n        data = this.inner();\n        break;\n\n      case \"left\":\n        data = this.left_merge();\n        break;\n\n      case \"right\":\n        data = this.right_merge();\n        break;\n    }\n\n    let df = new _frame.DataFrame(data = data, {\n      columns: this.columns\n    });\n    return df;\n  }\n\n  __create_columns() {\n    let self = this;\n    self.left_col = self.left.columns.filter((val, index) => {\n      return !self.left_col_index.includes(index);\n    });\n    self.right_col = self.right.columns.filter((val, index) => {\n      return !self.right_col_index.includes(index);\n    });\n    self.columns = [...self.on];\n    let column_duplicate = {};\n    let temp_column = [...self.left_col];\n    temp_column.push(...self.right_col);\n\n    for (let i = 0; i < temp_column.length; i++) {\n      let col = temp_column[i];\n\n      if (utils.__key_in_object(column_duplicate, col)) {\n        let col_name = `${col}_${column_duplicate[col]}`;\n        self.columns.push(col_name);\n        column_duplicate[col] += 1;\n      } else {\n        self.columns.push(col);\n        column_duplicate[col] = 1;\n      }\n    }\n  }\n\n  outer() {\n    let keys = Object.keys(this.left_key_dict);\n    keys.push(...Object.keys(this.right_key_dict));\n    keys = Array.from(new Set(keys));\n    let data = this.basic(keys);\n    return data;\n  }\n\n  inner() {\n    let left_keys = Object.keys(this.left_key_dict);\n    let right_keys = Object.keys(this.right_key_dict);\n    let keys = left_keys.filter(val => {\n      return right_keys.includes(val);\n    });\n    let data = this.basic(keys);\n    return data;\n  }\n\n  left_merge() {\n    let keys = Object.keys(this.left_key_dict);\n    let data = this.basic(keys);\n    return data;\n  }\n\n  right_merge() {\n    let keys = Object.keys(this.right_key_dict);\n    let data = this.basic(keys);\n    return data;\n  }\n\n  basic(keys) {\n    let data = [];\n\n    for (let i = 0; i < keys.length; i++) {\n      let key = keys[i];\n      let key_array = key.split(\"_\").filter(val => {\n        return val != \"\";\n      });\n\n      if (utils.__key_in_object(this.left_key_dict, key)) {\n        let left_row = this.left_key_dict[key];\n\n        for (let left_i = 0; left_i < left_row.length; left_i++) {\n          let left_row_row = left_row[left_i];\n\n          if (utils.__key_in_object(this.right_key_dict, key)) {\n            let right_row = this.right_key_dict[key];\n\n            for (let r_i = 0; r_i < right_row.length; r_i++) {\n              let right_row_row = right_row[r_i];\n              let inner_data = key_array.slice(0);\n              inner_data.push(...left_row_row);\n              inner_data.push(...right_row_row);\n              data.push(inner_data);\n            }\n          } else {\n            let nan_array = Array(this.right_col.length);\n\n            for (let i = 0; i < this.right_col.length; i++) {\n              nan_array[i] = NaN;\n            }\n\n            let inner_data = key_array.slice(0);\n            inner_data.push(...left_row_row);\n            inner_data.push(...nan_array);\n            data.push(inner_data);\n          }\n        }\n      } else {\n        let right_row = this.right_key_dict[key];\n\n        for (let i = 0; i < right_row.length; i++) {\n          let right_row_row = right_row[i];\n          let nan_array = Array(this.left_col.length);\n\n          for (let j = 0; j < nan_array.length; j++) {\n            nan_array[j] = NaN;\n          }\n\n          let inner_data = key_array.slice(0);\n          inner_data.push(...nan_array);\n          inner_data.push(...right_row_row);\n          data.push(inner_data);\n        }\n      }\n    }\n\n    return data;\n  }\n\n}\n\nexports.Merge = Merge;\n\nconst merge = kwargs => {\n  let merge = new Merge(kwargs);\n  return merge;\n};\n\nexports.merge = merge;"},"lineCount":268}},"error":null,"hash":"f473fe5b16c3eb63b6198cfac0e60633","cacheData":{"env":{}}}