{"id":"node_modules/table/dist/stringifyTableData.js","dependencies":[{"name":"/Users/alex/SoftwareDevelopment/Web/tacs-interface/node_modules/table/dist/stringifyTableData.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/alex/SoftwareDevelopment/Web/tacs-interface/package.json","includedInParent":true,"mtime":1615769723745},{"name":"/Users/alex/SoftwareDevelopment/Web/tacs-interface/.babelrc","includedInParent":true,"mtime":1614894608398},{"name":"/Users/alex/SoftwareDevelopment/Web/tacs-interface/node_modules/table/package.json","includedInParent":true,"mtime":499162500000}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n/**\n * Casts all cell values to a string.\n *\n * @param {table~row[]} rows\n * @returns {table~row[]}\n */\n\nvar stringifyTableData = function (rows) {\n  return rows.map(function (cells) {\n    return cells.map(String);\n  });\n};\n\nvar _default = stringifyTableData;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"source":"../src/stringifyTableData.js","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":0}},{"source":"../src/stringifyTableData.js","name":"rows","original":{"line":7,"column":16},"generated":{"line":14,"column":25}},{"source":"../src/stringifyTableData.js","name":"rows","original":{"line":7,"column":16},"generated":{"line":14,"column":35}},{"source":"../src/stringifyTableData.js","name":null,"original":{"line":7,"column":25},"generated":{"line":14,"column":41}},{"source":"../src/stringifyTableData.js","name":null,"original":{"line":8,"column":2},"generated":{"line":15,"column":0}},{"source":"../src/stringifyTableData.js","name":"rows","original":{"line":8,"column":9},"generated":{"line":15,"column":9}},{"source":"../src/stringifyTableData.js","name":null,"original":{"line":8,"column":13},"generated":{"line":15,"column":13}},{"source":"../src/stringifyTableData.js","name":"map","original":{"line":8,"column":14},"generated":{"line":15,"column":14}},{"source":"../src/stringifyTableData.js","name":"rows","original":{"line":8,"column":9},"generated":{"line":15,"column":17}},{"source":"../src/stringifyTableData.js","name":"cells","original":{"line":8,"column":19},"generated":{"line":15,"column":18}},{"source":"../src/stringifyTableData.js","name":"cells","original":{"line":8,"column":19},"generated":{"line":15,"column":28}},{"source":"../src/stringifyTableData.js","name":null,"original":{"line":8,"column":18},"generated":{"line":15,"column":33}},{"source":"../src/stringifyTableData.js","name":null,"original":{"line":8,"column":29},"generated":{"line":15,"column":35}},{"source":"../src/stringifyTableData.js","name":null,"original":{"line":9,"column":4},"generated":{"line":16,"column":0}},{"source":"../src/stringifyTableData.js","name":"cells","original":{"line":9,"column":11},"generated":{"line":16,"column":11}},{"source":"../src/stringifyTableData.js","name":null,"original":{"line":9,"column":16},"generated":{"line":16,"column":16}},{"source":"../src/stringifyTableData.js","name":"map","original":{"line":9,"column":17},"generated":{"line":16,"column":17}},{"source":"../src/stringifyTableData.js","name":"cells","original":{"line":9,"column":11},"generated":{"line":16,"column":20}},{"source":"../src/stringifyTableData.js","name":"String","original":{"line":9,"column":21},"generated":{"line":16,"column":21}},{"source":"../src/stringifyTableData.js","name":"cells","original":{"line":9,"column":11},"generated":{"line":16,"column":27}},{"source":"../src/stringifyTableData.js","name":null,"original":{"line":9,"column":4},"generated":{"line":16,"column":28}},{"source":"../src/stringifyTableData.js","name":null,"original":{"line":8,"column":9},"generated":{"line":17,"column":0}},{"source":"../src/stringifyTableData.js","name":"rows","original":{"line":8,"column":9},"generated":{"line":17,"column":3}},{"source":"../src/stringifyTableData.js","name":null,"original":{"line":8,"column":2},"generated":{"line":17,"column":4}}],"sources":{"../src/stringifyTableData.js":"/**\n * Casts all cell values to a string.\n *\n * @param {table~row[]} rows\n * @returns {table~row[]}\n */\nexport default (rows) => {\n  return rows.map((cells) => {\n    return cells.map(String);\n  });\n};\n"},"lineCount":null}},"error":null,"hash":"965d1771cf50cdfebad61fc68d74a32a","cacheData":{"env":{}}}